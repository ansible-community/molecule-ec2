---
{% raw -%}
# collections:
#  - name: community.aws

- name: Destroy
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"

  vars:
      project_name: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') | basename }}"
      scenario_name: "{{ lookup('env', 'MOLECULE_SCENARIO_NAME') }}"
      run_id: "{{ lookup('env', 'MOLECULE_RUN_ID') }}"
      key_pair_name: "{{ project_name }}-{{ scenario_name }}-molecule_key-{{ run_id }}"
      key_pair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/{{ key_pair_name }}"

  handlers:
    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
      listen: destruction

  tasks:
    - block:
        - name: Populate instance config
          set_fact:
            instance_conf: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
            skip_instances: false
        - name: Get instances list
          community.aws.ec2_instance_info:
            filters:
              'tag:created_by': 'molecule'
              'tag:platform_name': "{{ molecule_yml.platforms | map(attribute='name') | list }}"
              'tag:molecule_run_id': '{{ run_id }}'
              'tag:project_name': '{{ project_name }}'
              'tag:scenario_name': '{{ scenario_name }}'
      rescue:
        - name: Populate instance config when file missing
          set_fact:
            instance_conf: {}
            skip_instances: true

    - name: Destroy molecule instance(s)
      community.aws.ec2_instance:
        state: absent
        instance_ids: "{{ ec2_sets.instances | map(attribute='instance_id') | list }}"
        region: "{{ item.region if item.region is defined else omit }}"
      register: server
      with_items: "{{ instance_conf }}"
      when: not skip_instances
      async: 7200
      poll: 0
      notify: destruction

    - name: Wait for instance(s) deletion to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ec2_jobs
      until: ec2_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config
      set_fact:
        instance_conf: {}

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool
{%- endraw %}
